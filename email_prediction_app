import streamlit as st
import pickle
import pandas as pd

# Load the saved best model
model = pickle.load(open('best_model.pkl', 'rb'))


# Define a prediction function that returns probability and binary classification
def predict_open_email(customer_age, emails_opened, emails_clicked, purchase_history, time_spent_on_website,
                       days_since_last_open,
                       customer_engagement_score, clicked_previous_emails, device_type):
    # Create a DataFrame from user input
    input_data = pd.DataFrame(
        {'Customer_Age': [customer_age], 'Emails_Opened': [emails_opened], 'Emails_Clicked': [emails_clicked],
         'Purchase_History': [purchase_history], 'Time_Spent_On_Website': [time_spent_on_website],
         'Days_Since_Last_Open': [days_since_last_open], 'Customer_Engagement_Score': [customer_engagement_score],
         'Clicked_Previous_Emails': [clicked_previous_emails], 'Device_Type': [device_type]})

    # Get the probability of class 1 (email will be opened)
    prob = model.predict_proba(input_data)[:, 1][0]

    # Classify based on the 0.5 threshold
    prediction = 1 if prob >= 0.5 else 0

    return prob, prediction


# Streamlit app interface
st.title('Email Open Prediction App')

# Input fields for user input
customer_age = st.number_input('Customer Age', min_value=0, max_value=100, value=35)
emails_opened = st.number_input('Emails Opened', min_value=0, max_value=20, value=5)
emails_clicked = st.number_input('Emails Clicked', min_value=0, max_value=10, value=2)
purchase_history = st.number_input('Purchase History (in $)', min_value=0, value=1500)
time_spent_on_website = st.number_input('Time Spent on Website (minutes)', min_value=0.0, value=5.0)
days_since_last_open = st.number_input('Days Since Last Open', min_value=0, value=30)
customer_engagement_score = st.number_input('Customer Engagement Score', min_value=0, value=70)
clicked_previous_emails = st.selectbox('Clicked Previous Emails', [0, 1])
device_type = st.selectbox('Device Type', [0, 1], format_func=lambda x: 'Desktop' if x == 0 else 'Mobile')

# Predict button
if st.button('Predict'):
    # Get the prediction and probability
    prob, result = predict_open_email(customer_age, emails_opened, emails_clicked, purchase_history,
                                      time_spent_on_website, days_since_last_open, customer_engagement_score,
                                      clicked_previous_emails, device_type)

    # Display the results
    st.write(f'Probability of Opening Email: {prob * 100:.2f}%')
    if result == 1:
        st.success('Prediction: The customer will open the email.')
    else:
        st.warning('Prediction: The customer will not open the email.')
